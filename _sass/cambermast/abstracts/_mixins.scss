// Sass mixins

// ********** DEVICE SIZE SUPPORT **********
// Reference: https://itnext.io/writing-media-queries-with-sass-mixins-3ea591ea3ea4
// Example use:
//   @include for-size(phone-only){
//     margin-left: $gridMarginLeft;
//     margin-right: $gridMarginRight;
//   }
@mixin for-size($size) {
  @if $size == phone-only {
    @media (max-width: 599px) { @content; }
  } @else if $size == tablet-portrait-up {
    @media (min-width: 600px) { @content; }
  } @else if $size == tablet-landscape-up {
    @media (min-width: 900px) { @content; }
  } @else if $size == desktop-up {
    @media (min-width: 1200px) { @content; }
  } @else if $size == big-desktop-up {
    @media (min-width: 1800px) { @content; }
  }
}



// @mixin for-size($size) {
//     @if $size == full-size {
//       @media (min-width: 1800px) { @content; } 
//     } @else if $size == desktop-up {
//       @media (max-width: 1200px) { @content; }
//      }@else if $size == tablet-landscape-up {
//       @media (max-width: 900px) { @content; }
//      }@else if $size == tablet-only {
//       @media (max-width: 768px) { @content; }
//     }@else if $size == phone-only {
//       @media (max-width: 599px) { @content; }
      
//     }
//   }
 

//   Reference: https://medium.com/@timothyrobards/structuring-your-sass-projects-c8d41fa55ed4
//   If you want to take it a step further you could use conditionals to setup your mixins. 
//   You create just one @mixin block and set the parameters to be passed in — which we use to select our breakpoints, like so:
//   @mixin for-size($size) {
//     @if $size == phone-only {
//       @media (max-width: 599px) { @content; }
//     } @else if $size == tablet-portrait-up {
//       @media (min-width: 600px) { @content; }
//     } @else if $size == tablet-landscape-up {
//       @media (min-width: 900px) { @content; }
//     } @else if $size == desktop-up {
//       @media (min-width: 1200px) { @content; }
//     } @else if $size == big-desktop-up {
//       @media (min-width: 1800px) { @content; }
//     }
//   }
//   Then to use our mixins in this manner, we’d select it like so:
//   .header-title {  
//      font-size: 2rem;  
   
//      @include for-size(phone-only) {    
//         font-size: 1rem; 
//      }
//   }
//   Conclusion
//   It’s that simple! Writing media queries doesn’t need to be a headache. 
//   By using Sass mixins, we have one centralized location in which to manage our media queries. 
//   And handling the responsivity of our projects just got a whole lot easier!
//   I hope you found this article useful! You can follow me on Medium. I’m also on Twitter. 
//   Feel free to leave any questions in the comments below. I’ll be glad to help out!


// ********** Font sizing support **********
// Reference: https://kermode.co/2016/responsive-font-sizing-with-min-and-max/
// Usage:
//        @include fluid-type(14px, 18px);
//        or
///        @include fluid-type(20px, 32px, $vw-min: 500px);
/// Responsive font sizing. The size of the font will scale with the viewport
/// based on the information that you provide it. Additional properties may be
/// adding for things like padding.
///
/// @param {Integer} $font-size-min
/// @param {Integer} $font-size-max
/// @param {String} $properties [font-size]
/// @param {Integer} $vw-min [320] - the minimum viewport width
/// @param {Integer} $vw-max [1280] - the maximum viewport width
///
/// @require {function} strip-unit
///
/// @example scss - Basic usage Sass
///   h1 {
///     @include fluid-type(28px, 52px);
///   }
///
/// @example scss - Basic usage CSS output
///   h1 {
///     font-size: 28px;
///   }
///
///   @media screen and (min-width: 320px) {
///     h1 {
///       font-size: calc(28px + 24 * (100vw - 320px) / 960);
///     }
///   }
///
///   @media screen and (min-width: 1280px) {
///     h1 {
///       font-size: 52px;
///     }
///   }
///
/// Concept of precise control from Mike Riethmuller
/// https://madebymike.com.au/writing/precise-control-responsive-typography/
///
/// Original mixin implementation from Indrek Paas
/// http://www.sassmeister.com/gist/7f22e44ace49b5124eec
@mixin fluid-type(
  $font-size-min,
  $font-size-max,
  $properties: font-size,
  $vw-min: 320px,
  $vw-max: 1280px
  ) {

  @if(
    unitless($font-size-min) or
    unitless($font-size-max) or
    unitless($vw-min) or
    unitless($vw-max)
  ) {
    @error "All min and max properties must be provided with a unit (e.g.: px)";
  }

  @if(
    unit($font-size-min) == unit($font-size-max) and
    unit($font-size-min) == unit($vw-min) and
    unit($font-size-min) == unit($vw-max)
  ) {
    @each $property in $properties {
      #{$property}: $font-size-min;
    }

    @media screen and (min-width: $vw-min) {
      @each $property in $properties {
        #{$property}: calc(#{$font-size-min} + #{strip-unit($font-size-max - $font-size-min)} * (100vw - #{$vw-min}) / #{strip-unit($vw-max - $vw-min)});
      }
    }

    @media screen and (min-width: $vw-max) {
      @each $property in $properties {
        #{$property}: $font-size-max;
      }
    }
  } @else {
    @error "All units must be the same. Incompatible units were passed: #{unit($font-size-min)}, #{unit($font-size-max)}, #{unit($vw-min)}, #{unit($vw-max)}";
  }
}

/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
///
/// Original implementation by Miriam Suzanne
/// http://stackoverflow.com/a/12335841/1339786
///
/// Update implementation from Hugo Giraudel
/// https://css-tricks.com/snippets/sass/strip-unit-function/
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}